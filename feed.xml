<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://gohmat.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://gohmat.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-07-31T16:24:32+00:00</updated><id>https://gohmat.github.io/feed.xml</id><title type="html">blank</title><subtitle>The personal website of Matt Goh. </subtitle><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://gohmat.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://gohmat.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://gohmat.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://gohmat.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://gohmat.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://gohmat.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Building XMDS from source on the NCI</title><link href="https://gohmat.github.io/blog/2020/XMDS-build/" rel="alternate" type="text/html" title="Building XMDS from source on the NCI"/><published>2020-02-03T11:37:00+00:00</published><updated>2020-02-03T11:37:00+00:00</updated><id>https://gohmat.github.io/blog/2020/XMDS-build</id><content type="html" xml:base="https://gohmat.github.io/blog/2020/XMDS-build/"><![CDATA[<p>Installing XMDS on a personal computer running Linux or Mac OS is simple (see <a href="http://www.xmds.org/installation.html">this guide</a>). Unfortunately, getting it running on the NCI is a more involved task. This guide details the build/installation process for XMDS2 3.0.0 on the Gadi supercomputer at the NCI, but may be helpful for later versions or other clusters.</p> <p>Begin by connecting to Gadi via SSH (substitute your own username):</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell">ssh ab1234@gadi.nci.org.au</code></pre></figure> <p>and enter your password. Download the source for XMDS:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell">wget https://sourceforge.net/projects/xmds/files/xmds-3.0.0.tar.gz</code></pre></figure> <p>then extract and open the new directory:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">tar</span> <span class="nt">-xvf</span> xmds-3.0.0.tar.gz
<span class="nb">cd </span>xmds-3.0.0</code></pre></figure> <p>Now build XMDS by running the following commands (substituting all uses of 123 with your own group ID, and all uses of ab1234 with your own username):</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell">module load python3/3.7.4
module load hdf5/1.10.5
module load szip/2.1.1
module load fftw3/3.3.8
module load openmpi/3.1.4

<span class="nb">export </span><span class="nv">install_dir</span><span class="o">=</span>/home/123/ab1234/xmds/3.0.0

<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="k">${</span><span class="nv">install_dir</span><span class="k">}</span>/lib/python3.7/site-packages 

<span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span>/home/123/ab1234/xmds/3.0.0/lib/python3.7/site-packages:<span class="nv">$PYTHONPATH</span>

./setup.py develop <span class="nt">--prefix</span><span class="o">=</span><span class="k">${</span><span class="nv">install_dir</span><span class="k">}</span>

<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">MKL</span><span class="k">}</span>/../compiler/lib/intel64/:<span class="nv">$LD_LIBRARY_PATH</span>
<span class="nb">export </span><span class="nv">LIBRARY_PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">MKL</span><span class="k">}</span>/../compiler/lib/intel64/:<span class="nv">$LIBRARY_PATH</span></code></pre></figure> <p>You will now need to reconfigure a few things by editing the file (substitute 123 with your group ID and ab1234 with your username) <code class="language-plaintext highlighter-rouge">/home/123/ab1234/xmds-3.0.0/xpdeint/support/wscript</code>. If you are comfortable with command-line text editors (e.g. emacs), you should edit the file using one. Otherwise, download <code class="language-plaintext highlighter-rouge">wscript</code> using FileZilla (or your preferred SFTP method) and open it in your preferred text editor on your own machine. Locate the following lines in <code class="language-plaintext highlighter-rouge">wscript</code> and make the following changes (comment out the existing lines marked <code class="language-plaintext highlighter-rouge">#aab</code>, and for the <code class="language-plaintext highlighter-rouge">lib</code> definitions, add the line below):</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># If we have a static library marker, try to link the simulation statically for performance.</span>
        <span class="k">if </span>conf.env[<span class="s1">'STLIB_MARKER'</span><span class="o">]</span>:
            <span class="c">#aab conf.env['FINAL_LINK_VAR'] = conf.env['STLIB_MARKER']</span>
            result <span class="o">=</span> conf.check_cxx<span class="o">(</span>
            <span class="nb">.</span> <span class="nb">.</span> .</code></pre></figure> <figure class="highlight"><pre><code class="language-shell" data-lang="shell">check_cxx<span class="o">(</span>
            <span class="c">#aab lib=["iomp", "vml"],</span>
            <span class="nv">lib</span><span class="o">=[</span><span class="s1">'mkl_intel_lp64'</span>, <span class="s1">'mkl_intel_thread'</span>, <span class="s1">'mkl_core'</span>, <span class="s1">'iomp5'</span>, <span class="s1">'mkl_vml_avx'</span><span class="o">]</span>,
            <span class="nv">header_name</span><span class="o">=</span><span class="s1">'mkl.h'</span>,
            <span class="nv">uselib_store</span><span class="o">=</span><span class="s1">'mkl_vsl'</span>,
            msg <span class="o">=</span> <span class="s2">"Checking for Intel's Vector Math Library"</span>,
            <span class="nb">.</span> <span class="nb">.</span> .</code></pre></figure> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># Find CBLAS</span>
        cblas_options <span class="o">=</span> <span class="o">[</span>
            <span class="o">{</span><span class="c"># Intel MKL</span>
                <span class="s1">'defines'</span>: <span class="s1">'CBLAS_MKL'</span>,
                <span class="c">#aab 'lib': ['mkl_intel_lp64', 'mkl_intel_thread', 'mkl_core'],</span>
                <span class="s1">'lib'</span>: <span class="o">[</span><span class="s1">'mkl_intel_lp64'</span>, <span class="s1">'mkl_intel_thread'</span>, <span class="s1">'mkl_core'</span>, <span class="s1">'iomp5'</span><span class="o">]</span>,
                <span class="s1">'fragment'</span>: <span class="s1">'''
                . . .</span></code></pre></figure> <figure class="highlight"><pre><code class="language-shell" data-lang="shell">options <span class="o">=</span> <span class="o">[</span>
            <span class="c">#aab dict(stlib=lib, msg=KWs['msg'] + " (static library)", errmsg="no (will try dynamic library instead)", **extra_static_kws),</span>
            dict<span class="o">(</span><span class="nv">lib</span><span class="o">=</span>lib,   <span class="nv">msg</span><span class="o">=</span>KWs[<span class="s1">'msg'</span><span class="o">]</span> + <span class="s2">" (dynamic library)"</span>, <span class="k">**</span>extra_shared_kws<span class="o">)</span>,
        <span class="o">]</span></code></pre></figure> <p>If you’re using a command-line text editor, save these changes and proceed - if you’re editing it on your own machine, save it on your machine, then re-upload it to Gadi, replacing the old wscript file. Now reconfigure XMDS by running the following command on Gadi:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="k">${</span><span class="nv">install_dir</span><span class="k">}</span>/bin/xmds2 <span class="nt">--reconfigure</span></code></pre></figure> <p>Read through the log to make sure everything’s configured properly (if it reports being unable to find a required package, you have a problem). If all went well, you’ve successfully built XMDS from source for Gadi! Your binary is located at <code class="language-plaintext highlighter-rouge">/home/123/ab1234/xmds/3.0.0/bin/xmds2</code>, substituting 123 for your group ID and ab1234 for your own username.</p> <h1 id="using-xmds-on-gadi">Using XMDS on Gadi</h1> <p>There are two parts to using XMDS: running the <code class="language-plaintext highlighter-rouge">xmds2</code> binary on your <code class="language-plaintext highlighter-rouge">.xmds</code> file to generate executable code, then running that executable code. The first part can be done via the command line on the Gadi head node. Connect to Gadi via SSH. You will need to set your PYTHONPATH, and depending on what features you are using, load some or all of the relevant modules. If in doubt, run all the following commands:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell">module load python3/3.7.4
module load hdf5/1.10.5
module load szip/2.1.1
module load fftw3/3.3.8
module load openmpi/3.1.4

<span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span>/home/123/ab1234/xmds/3.0.0/lib/python3.7/site-packages:<span class="nv">$PYTHONPATH</span>

<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">MKL</span><span class="k">}</span>/../compiler/lib/intel64/:<span class="nv">$LD_LIBRARY_PATH</span>
<span class="nb">export </span><span class="nv">LIBRARY_PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">MKL</span><span class="k">}</span>/../compiler/lib/intel64/:<span class="nv">$LIBRARY_PATH</span></code></pre></figure> <p>Now place the <code class="language-plaintext highlighter-rouge">xmds2</code> binary you built previously and your <code class="language-plaintext highlighter-rouge">.xmds</code> file in the same directory, and navigate to this directory. Then run XMDS on this file:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell">./xmds2 filename.xmds</code></pre></figure> <p>If it runs successfully, XMDS should generate an executable (usually named <code class="language-plaintext highlighter-rouge">filename</code> unless you’ve specified otherwise in your <code class="language-plaintext highlighter-rouge">.xmds</code> file).</p> <p>Running the executable differs from the usual process you would follow on your own computer, since Gadi will automatically kill any computationally expensive processes being run on the head node. You must queue it using <code class="language-plaintext highlighter-rouge">qsub</code> (see the <a href="https://opus.nci.org.au/display/Help/How+to+submit+a+job">NCI documentation</a> if you are unfamiliar). Once again, your job scripts may require you to load modules and set PYTHONPATH - just include those lines in your job script if in doubt. The following is an example of a job script for an XMDS binary:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c">#!/bin/bash</span>
<span class="c">#PBS -P kl43</span>
<span class="c">#PBS -q normal</span>
<span class="c">#PBS -l walltime=1:00:00,mem=8GB,ncpus=64,jobfs=2GB</span>
<span class="c">#PBS -l wd</span>
<span class="c">#PBS -M matt.goh@anu.edu.au</span>
<span class="c">#PBS -m abe</span>
module load python3/3.7.4
module load hdf5/1.10.5
module load szip/2.1.1
module load fftw3/3.3.8
module load openmpi/3.1.4
<span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span>/home/123/ab1234/xmds/3.0.0/lib/python3.7/site-packages:<span class="nv">$PYTHONPATH</span>
mpirun <span class="nt">-np</span> 64 ./singleparticlemeasurement <span class="nt">--k_ED</span> 4 <span class="nt">--c1</span> 0 <span class="nt">--c2</span> 0 <span class="nt">--switchtime</span> 0 <span class="nt">--r</span> 0.1 <span class="nt">--alpha</span> 0.05 <span class="nt">--simulationlength</span> 50</code></pre></figure> <p>which, if saved as <code class="language-plaintext highlighter-rouge">jobscript</code>, would be queued by running:</p> <figure class="highlight"><pre><code class="language-shell" data-lang="shell">qsub jobscript</code></pre></figure> <p>Note that this job script executes the binary using <code class="language-plaintext highlighter-rouge">mpirun</code>: only do this if you have enabled MPI in your <code class="language-plaintext highlighter-rouge">.xmds</code> script.</p>]]></content><author><name></name></author><category term="computing"/><category term="software"/><category term="HPC"/><category term="XMDS"/><summary type="html"><![CDATA[A guide to compiling XMDS with all the bells and whistles on the Gadi supercomputer at the National Computational Infrastructure (NCI).]]></summary></entry></feed>